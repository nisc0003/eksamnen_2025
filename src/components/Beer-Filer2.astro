<!-- ------------------------------knapper i toppen af filtrering-------------------------------------- -->
<div class="filter_grid">
  <div id="button_filter">
    <button id="all" class="filter-btn">
      <p>Alle Produkter</p>
      <img src="/logo.svg" alt="call to action illustration" />
      <div class="button_circle circle-all"></div>
    </button>
    <!-- ---- -->
    <button id="Beer-Can" class="filter-btn">
      <p>Øldåser</p>
      <img src="/sorteringsliste/beer.webp" alt="call to action illustration" />
      <div class="button_circle circle-beer-can"></div></button
    >
    <!-- ---- -->
    <button id="Case-offers" class="filter-btn">
      <p>ølkasser</p>
      <img
        src="/sorteringsliste/Hele_rammer.webp"
        alt="call to action illustration"
      />
      <div class="button_circle circle-case-offers"></div>
    </button>
    <!-- ---- -->
    <button id="Wild-Ales" class="filter-btn">
      <p>Wild Ales</p>
      <img
        src="/sorteringsliste/Wild_ales.webp"
        alt="call to action illustration"
      />
      <div class="button_circle circle-wild-ales"></div>
    </button>
    <!-- ---- -->
    <button id="Barrel-Aged" class="filter-btn">
      <p>Barrel Aged</p>
      <img
        src="/sorteringsliste/Barrel_aged.webp"
        alt="call to action illustration"
      />
      <div class="button_circle circle-barrel-aged"></div>
    </button>
    <!-- ---- -->
    <button id="Tilbehør" class="filter-btn">
      <p>Tilbehør</p>
      <img
        src="/sorteringsliste/Tilbehoer.webp"
        alt="call to action illustration"
      />
      <div class="button_circle circle-tilbehoer"></div>
    </button>
  </div>

  <!-- ------------------------------dropdown knap-------------------------------------- -->
  <div class="special_filter_grid">
    <div id="sortering_container" class="custom-dropdown">
      <button id="dropdown_toggle">Vælg filter</button>
      <ul id="custom_dropdown_list" class="hidden">
        <li data-value="alphaA-Z">Alfabetisk, A - Z</li>
        <li data-value="alphaZ-A">Alfabetisk, Z - A</li>
        <li data-value="discount">Udsalg</li>
        <li data-value="Highlow">Højeste pris</li>
        <li data-value="Lowhigh">Laveste pris</li>
      </ul>
    </div>
    <!-- ------------------------------pris filtrering-------------------------------------- -->
    <!-- Pris filtrering -->
    <div id="price_filter_dropdown" class="custom-dropdown">
      <button id="price_filter_toggle">Pris Filter</button>
      <div id="price_filter" class="hidden">
        <div class="grid_1-1">
          <label>
            <input
              id="minPrice"
              type="number"
              min="0"
              step="5"
              placeholder="Minimums - pris"
            />
          </label>
          <label>
            <input
              id="maxPrice"
              type="number"
              min="0"
              step="5"
              placeholder="Maximum - pris"
            />
          </label>
        </div>
        <button id="applyPriceFilter">Apply Price Filter</button>
      </div>
    </div>
  </div>

  <!-- ------------------------------start på javascript-------------------------------------- -->
</div>
<!-- bruger  is="client" så den kørens i browseren og ikke server. 
 ellers fik man fejlkoder med astro grundet der tages brug af dom elementer i koden-->
<script is="client">
  // venter på siden er indlæst
  document.addEventListener("DOMContentLoaded", function () {
    // konstant for alle elementer i containeren med class "product-grid"
    const productList = document.querySelector(".product-grid");

    // Hent dropdown-menuens værdi
    const sortering_dropdown = document.getElementById("sortering_dropdown");

    // Hent prisfilterets minimum og maksimum inputfelter og knap
    const minPriceInput = document.getElementById("minPrice");
    const maxPriceInput = document.getElementById("maxPrice");
    const applyPriceBtn = document.getElementById("applyPriceFilter");

    // Hent alle værdier skrevet ind i price_filter
    const categoryButtons = document.querySelectorAll("#button_filter button");

    // Hvis der ikke er knapper i kategorifilteret, stop koden
    if (!categoryButtons.length) return;
    // -------------------------------------------------------------------------------

    // Gem hele listen i en array.
    const originalItems = Array.from(productList.querySelectorAll("li"));

    // Variabel til at huske hvilken kategori der er valgt starter med all
    let activeCategoryFilter = "all";

    // Variabel til at huske hvilken sorteringsmetode der er valgt starter tomt
    let activeSortFilter = "";

    // huske pris filter minimum og maksimum som er null / ikke noget
    let priceFilter = { min: null, max: null };

    // Funktion til at vise produkter i produkt-listen
    // 1 tømmer DOM / tilføjer alle elementernr i arrayet tilbagwe / hvert produkt vises (display = "").
    function showItems(items) {
      // tøm listen ved brug af constanten for document.querySelector(".product-grid");
      productList.innerHTML = "";
      items.forEach(function (item) {
        // sørger for produktet er synligt
        item.style.display = "";
        // tilføj produkt til listen i DOM
        productList.appendChild(item);
      });
    }

    // -------------------------------------------------------------------------------------------hertil jeg var nået i forståelse______________

    // Funktion der filtrerer produkter efter kategori
    function filterByCategory(items, category) {
      // Hvis ingen kategori valgt eller brugeren har valgt all beers så viser den alle
      if (!category || category === "all") {
        return items;
      }

      // ellers så skal funktionen filtrere efter kategori 2 der skal matche kat 1
      return items.filter(function (item) {
        return item.dataset.category2 === category;
      });
    }

    // Funktion der sorterer produkter alfabetisk efter titel ved at sammenligne dem parvist til den finder det rigtige
    function sortByTitle(products, alphabet) {
      products.sort(function (merch1, merch2) {
        const text1 = merch1.querySelector("h3 a").textContent.toLowerCase();
        const text2 = merch2.querySelector("h3 a").textContent.toLowerCase();

        if (alphabet) {
          return text1.localeCompare(text2);
        } else {
          return text2.localeCompare(text1);
        }
      });
    }

    // Funktion der filtrerer produkter som har en udsalgsprocent (element med class ".percentage")
    // Returnerer kun produkter hvor denne findes.
    function filterByDiscount(items) {
      return items.filter(function (item) {
        return item.querySelector(".percentage") !== null;
      });
    }
    // ________________________________________________________________________________________________________________________________
    // Funktion der sorterer produkter efter pris
    // sortere produkter efter pris - højest eller lavest først
    function sortByPrice(items, highestFirst) {
      items.sort((a, b) => {
        // få pris for produkt B
        // få pris for produkt A
        const priceA = getPrice(a);
        const priceB = getPrice(b);
        // sorter efter valg
        return highestFirst ? priceB - priceA : priceA - priceB;
      });
    }

    // hjælper til at få prisen fra et produkt
    function getPrice(item) {
      const priceText = item.querySelector(".price_box h6")?.textContent || "";

      const numMatch = priceText.match(/\d+/);
      // Finder det første tal i teksten:
      //   / / = start og slut på søgning
      //   \d = et tal fra 0 til 9
      //   + = et eller flerea tal i streg¨
      // Hvis der er et tal, brug det - ellers skal den tage brug af 0
      return numMatch ? Number(numMatch[0]) : 0;
    }

    // filtrere produkter efter pris mellem min og max
    function filterByPrice(items, min, max) {
      return items.filter((item) => {
        // brug getPrice funktionen
        const price = getPrice(item);
        // for lav pris
        if (min !== null && price < min) return false;
        // for høj pris
        if (max !== null && price > max) return false;
        return true;
      });
    }
    // ________________________________________________________________________________________________________________________________

    // Hovedfunktion der samler alle filtre og sortering og opdaterer visning
    function applyFilters() {
      // Start med alle originale produkter
      let filteredItems = [...originalItems];

      // Filtrér efter valgt kategori
      filteredItems = filterByCategory(filteredItems, activeCategoryFilter);

      // Hvis valgt filter er efter udsalg
      if (activeSortFilter === "discount") {
        filteredItems = filterByDiscount(filteredItems);
      }

      // Filtrer efter pris (min og max)
      filteredItems = filterByPrice(
        filteredItems,
        priceFilter.min,
        priceFilter.max,
      );

      // Sorter baseret på valgt sorteringsfilter
      if (activeSortFilter === "alphaA-Z") {
        sortByTitle(filteredItems, true);
      } else if (activeSortFilter === "alphaZ-A") {
        sortByTitle(filteredItems, false);
      } else if (activeSortFilter === "Highlow") {
        sortByPrice(filteredItems, true);
      } else if (activeSortFilter === "Lowhigh") {
        sortByPrice(filteredItems, false);
      }

      // Vis den filtrerede liste
      showItems(filteredItems);
    }

    // -----------------------------------------------------------dropdown menu----------------------
    // Håndtering af dropdown-menu for sortering
    const customDropdown = document.getElementById("sortering_container");
    const selectedOption = document.getElementById("dropdown_toggle");
    const dropdownOptions = document.getElementById("custom_dropdown_list");

    // Når brugeren klikker på dropdown-toggle knappen
    // Viser eller skjuler dropdown-menuen ved at toggle "show" klassen
    selectedOption.addEventListener("click", function () {
      dropdownOptions.classList.toggle("show");
    });

    // Når brugeren vælger en mulighed i dropdown-menuen
    dropdownOptions.addEventListener("click", function (e) {
      // Tjek om det klikkede element er en LI (list item)
      if (e.target.tagName === "LI") {
        // Hent værdien fra data-value attributten
        const value = e.target.getAttribute("data-value");

        // Opdater den aktive sorteringsfilter med den valgte værdi
        activeSortFilter = value;

        // Opdater teksten på dropdown-toggle knappen
        selectedOption.textContent = e.target.textContent;

        // Skjul dropdown-menuen
        dropdownOptions.classList.remove("show");

        // Kald applyFilters for at opdatere produktvisningen
        applyFilters();
      }
    });

    // Luk dropdown-menuen hvis brugeren klikker udenfor
    document.addEventListener("click", function (e) {
      // Tjek om det klikkede element er udenfor dropdown-containeren
      if (!customDropdown.contains(e.target)) {
        // Skjul dropdown-menuen
        dropdownOptions.classList.remove("show");
      }
    });
    // -----------------------------------------------------------dropdown menu slut----------------------

    // Når "Apply Price Filter" knappen klikkes, opdater min/max priser og kør filtrering
    applyPriceBtn.addEventListener("click", function () {
      priceFilter.min = minPriceInput.value
        ? Number(minPriceInput.value)
        : null;
      priceFilter.max = maxPriceInput.value
        ? Number(maxPriceInput.value)
        : null;
      applyFilters();
    });

    // Gå igennem alle kategoriknapper og tilføj klik-event
    categoryButtons.forEach(function (btn) {
      btn.addEventListener("click", function () {
        // Fjern "active" class fra alle knapper, så kun én er aktiv
        categoryButtons.forEach(function (b) {
          b.classList.remove("active");
        });

        // Tilføj "active" til den klikkede knap
        btn.classList.add("active");

        // Opdater den valgte kategori baseret på knap-id
        activeCategoryFilter = btn.id;

        // Kør filterfunktionen med ny kategori
        applyFilters();
      });
    });

    // Vis alle produkter fra start (ingen filtre aktiveret)
    showItems(originalItems);
  });
  // -----------------------------------------------------------pris dropdown menu----------------------
  const priceFilterToggle = document.getElementById("price_filter_toggle");
  const priceFilterBox = document.getElementById("price_filter");

  priceFilterToggle.addEventListener("click", function () {
    priceFilterBox.classList.toggle("show");
  });

  // Luk dropdown hvis brugeren klikker udenfor
  document.addEventListener("click", function (e) {
    if (!document.getElementById("price_filter_dropdown").contains(e.target)) {
      priceFilterBox.classList.remove("show");
    }
  });
</script>

<style>
  #button_filter {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto;
    gap: 0.75rem;
    list-style: none;
    overflow: hidden;
    place-self: center;
    margin-block: 2rem;
  }

  .filter-btn {
    display: grid;
    grid-template-columns: 4fr 1fr;
    grid-template-rows: auto 3fr;
    column-gap: 0.5rem;
    padding: 0px;
    padding-inline: 0.5rem;
    width: 100%;
    height: 100%;
    background-color: white;
    border: solid var(--second-color) 2px;
    border-radius: 1.5rem;
    overflow: hidden;
  }

  .filter-btn p {
    font-family: "Montserrat", sans-serif;
    font-weight: 700;
    font-size: 1cqw;
    margin-top: 0.5rem;
    font-weight: 700;
    place-self: start;
    border: none;
    outline: none;
    cursor: pointer;
    grid-row: 1;
    grid-column: 1 / span 2;
  }

  .filter-btn img {
    grid-row: 2;
    grid-column: 1;
    place-self: end;
  }
  .button_circle {
    width: 1.25rem;
    height: 1.25rem;
    grid-row: 2;
    grid-column: 2;
    place-self: end end;
    border-radius: 100rem;
    grid-row: 2;
    grid-column: 2;
    margin-block: 0.5rem;
  }

  :root {
    --filter-color_new: #d44e4e;
    --filter-color_case: #6077ca;
    --filter-color_wild-ale: #7fb378;
    --filter-color_barrel-age: #cccccc;
    --filter-color_accessories: #6aafb7;
    --filter-color_all: #d4814e;
  }

  .circle-all {
    background-color: var(--filter-color_all);
  }

  .circle-beer-can {
    background-color: var(--filter-color_new);
  }

  .circle-case-offers {
    background-color: var(--filter-color_case);
  }

  .circle-wild-ales {
    background-color: var(--filter-color_wild-ale);
  }

  .circle-barrel-aged {
    background-color: var(--filter-color_barrel-age);
  }

  .circle-tilbehoer {
    background-color: var(--filter-color_accessories);
  }

  #button_filter {
    background-color: none;
  }

  #button_filter button.active {
    background-color: var(--main-color);
    border: none;
  }
  /* --------------------------------------------------------------------------------- */

  .special_filter_grid {
    display: grid;
    gap: 1rem;
    margin-inline: 2vw;
  }

  .filter_grid {
    display: grid;
    place-self: center;
    place-content: center;
    margin-inline: 12vw;
  }

  .custom-dropdown {
    position: relative;
    width: 100%;
  }

  #dropdown_toggle {
    width: 100%;
    background-color: white;
    color: black;
    padding: 15px;
    font-size: 1rem;
    border: 2px solid var(--second-color);
    border-radius: 4px;
    text-align: left;
    cursor: pointer;
  }

  #custom_dropdown_list {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 999;
    width: 100%;
    background-color: white;
    border: 2px solid var(--second-color);
    border-top: none;
    border-radius: 0 0 4px 4px;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  #custom_dropdown_list li {
    font-family: "Montserrat", sans-serif;
    font-weight: 500;
    font-size: 1rem;
    padding: 15px;
    cursor: pointer;
    transition: 0.1s ease;
    color: var(--second-color);
  }

  #custom_dropdown_list li:hover {
    background-color: var(--second-color);
    color: white;
  }

  .hidden {
    display: none;
  }
  .show {
    display: block;
  }
  /* --------------------------------------- */

  .grid_1-1 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  #price_filter_toggle {
    width: 100%;
    background-color: white;
    color: black;
    padding: 15px;
    font-size: 1rem;
    border: 2px solid var(--second-color);
    border-radius: 4px;
    text-align: left;
    cursor: pointer;
  }

  #price_filter {
    display: grid;
    background-color: white;
    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
    padding: 2rem;
  }

  #price_filter label {
    font-family: "Montserrat", sans-serif;
    font-weight: 500;
    font-size: 1rem;
    margin-bottom: 1rem;
  }

  #price_filter input[type="number"] {
    display: grid;
    width: 100%;
    grid-row: 2;
    padding-block: 0.5rem;
    font-size: 1rem;
    box-sizing: border-box;
    background-color: white;
    color: rgba(25, 25, 25, 1);
    border: solid 2px var(--second-color);
    border-radius: 4px;
  }

  #price_filter button {
    display: grid;
    background-color: white;
    color: rgba(25, 25, 25, 1);
    border: solid 2px var(--second-color);
    font-size: 0.9rem;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
  }

  #price_filter button:hover {
    background-color: rgba(25, 25, 25, 1);
    color: white;
  }

  #price_filter input {
    font-family: "inter", sans-serif;
    font-size: 1rem;
    border-radius: 3px;
  }

  #applyPriceFilter {
    white-space: nowrap;
    place-content: center;
  }

  .custom-dropdown #price_filter.hidden {
    display: none;
  }

  .custom-dropdown #price_filter.show {
    display: block;
    position: absolute;
    width: 100%;
    z-index: 10;
  }

  /* --------------------------------------------------------------------------------- */

  @media (min-width: 800px) {
    #button_filter {
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 1rem;
    }
  }

  @media screen and (min-width: 1000px) {
    #button_filter {
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
      grid-template-rows: auto;
    }
  }

  @media screen and (min-width: 800px) {
    section {
      margin-right: 10vw;
      margin-left: 10vw;
    }
    #button_filter {
      gap: 1.25rem;
    }

    .special_filter_grid {
      grid-template-columns: 1fr 1fr;
    }

    .filter-btn {
      size-adjust: cover;
      padding: 0px;
      padding-inline: 0.5rem;
      width: 100%;
      height: 100%;
      border: solid var(--second-color) 2px;
      border-radius: 1.5rem;
      overflow: hidden;
    }

    .filter-btn img {
      grid-row: 2;
      grid-column: 1;
      place-self: end;
    }
    .button_circle {
      width: 1.25rem;
      height: 1.25rem;
      grid-row: 2;
      grid-column: 2;
      place-self: end end;
      border-radius: 100rem;
      grid-row: 2;
      grid-column: 2;
      margin-block: 0.5rem;
    }
  }
</style>
